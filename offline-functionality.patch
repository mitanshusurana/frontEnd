diff --git a/src/app/app.component.html b/src/app/app.component.html
index 67e7bd4..326e369 100644
--- a/src/app/app.component.html
+++ b/src/app/app.component.html
@@ -1 +1,14 @@
-<router-outlet />
+<div class="app-container">
+  <header>
+    <h1>Student Festival Registration</h1>
+    <div class="network-status" [ngClass]="{'online': isOnline, 'offline': !isOnline}">
+      {{ isOnline ? 'Online' : 'Offline' }}
+    </div>
+  </header>
+
+  <main>
+    <!-- Your main content goes here -->
+  </main>
+
+  <app-notification></app-notification>
+</div>
diff --git a/src/app/app.component.scss b/src/app/app.component.scss
index e69de29..6a55ca7 100644
--- a/src/app/app.component.scss
+++ b/src/app/app.component.scss
@@ -0,0 +1,29 @@
+.app-container {
+  font-family: Arial, sans-serif;
+  max-width: 1200px;
+  margin: 0 auto;
+  padding: 20px;
+}
+
+header {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  margin-bottom: 20px;
+}
+
+.network-status {
+  padding: 5px 10px;
+  border-radius: 4px;
+  font-weight: bold;
+}
+
+.online {
+  background-color: #4CAF50;
+  color: white;
+}
+
+.offline {
+  background-color: #f44336;
+  color: white;
+}
diff --git a/src/app/app.component.ts b/src/app/app.component.ts
index 6a4c325..b246ce1 100644
--- a/src/app/app.component.ts
+++ b/src/app/app.component.ts
@@ -1,13 +1,29 @@
-import { Component } from '@angular/core';
-import { RouterOutlet } from '@angular/router';
+import { Component, OnInit } from '@angular/core';
+import { NotificationService } from './services/notification.service';
 
 @Component({
   selector: 'app-root',
-  standalone: true,
-  imports: [RouterOutlet],
   templateUrl: './app.component.html',
-  styleUrl: './app.component.scss'
+  styleUrls: ['./app.component.scss']
 })
-export class AppComponent {
-  title = 'suranagems';
+export class AppComponent implements OnInit {
+  isOnline: boolean = navigator.onLine;
+
+  constructor(private notificationService: NotificationService) {}
+
+  ngOnInit() {
+    this.setupNetworkListeners();
+  }
+
+  private setupNetworkListeners() {
+    window.addEventListener('online', () => {
+      this.isOnline = true;
+      this.notificationService.showNotification('You are back online!', 'success');
+    });
+
+    window.addEventListener('offline', () => {
+      this.isOnline = false;
+      this.notificationService.showNotification('You are offline. Changes will be synced when you\'re back online.', 'info');
+    });
+  }
 }
diff --git a/src/app/app.module.ts b/src/app/app.module.ts
index d9558f0..122212f 100644
--- a/src/app/app.module.ts
+++ b/src/app/app.module.ts
@@ -1,34 +1,35 @@
 import { NgModule } from '@angular/core';
 import { BrowserModule } from '@angular/platform-browser';
-import { RouterModule } from '@angular/router';
-import { FormsModule, ReactiveFormsModule } from '@angular/forms';
 import { HttpClientModule } from '@angular/common/http';
 
 import { AppComponent } from './app.component';
-import { AuthGuard } from './auth.guard';
-import { AuthService } from './auth.service';
-import { LoginComponent } from './login/login.component';
-import { NavigationComponent } from './navigation/navigation.component';
-
-import { routes } from './app.routes';
-import { MatTableModule } from '@angular/material/table';
-import { MatIconModule } from '@angular/material/icon';
+import { IndexedDBService } from './services/indexeddb.service';
+import { TransactionService } from './services/transaction.service';
+import { BackgroundSyncService } from './services/background-sync.service';
+import { LedgerCacheService } from './services/ledger-cache.service';
+import { NotificationService } from './services/notification.service';
+import { NotificationComponent } from './components/notification/notification.component';
 
 @NgModule({
   declarations: [
-    LoginComponent,
-    NavigationComponent
+    AppComponent,
+    NotificationComponent,
+    // Add other components here
   ],
   imports: [
     BrowserModule,
     HttpClientModule,
-    ReactiveFormsModule,
-    FormsModule,
-    MatTableModule,
-    MatIconModule,
-    RouterModule.forRoot(routes)
+    // Add other modules here
+  ],
+  providers: [
+    IndexedDBService,
+    TransactionService,
+    BackgroundSyncService,
+    LedgerCacheService,
+    NotificationService
   ],
-  providers: [AuthGuard, AuthService],
   bootstrap: [AppComponent]
 })
-export class AppModule { }
+export class AppModule {
+  constructor(private backgroundSyncService: BackgroundSyncService) {}
+}
diff --git a/src/app/components/notification/notification.component.html b/src/app/components/notification/notification.component.html
new file mode 100644
index 0000000..355b43f
--- /dev/null
+++ b/src/app/components/notification/notification.component.html
@@ -0,0 +1,5 @@
+<div class="notifications-container">
+  <div *ngFor="let notification of notifications" class="notification" [ngClass]="notification.type">
+    {{ notification.message }}
+  </div>
+</div>
diff --git a/src/app/components/notification/notification.component.scss b/src/app/components/notification/notification.component.scss
new file mode 100644
index 0000000..0b07a9f
--- /dev/null
+++ b/src/app/components/notification/notification.component.scss
@@ -0,0 +1,26 @@
+.notifications-container {
+  position: fixed;
+  top: 20px;
+  right: 20px;
+  z-index: 1000;
+}
+
+.notification {
+  padding: 10px 20px;
+  margin-bottom: 10px;
+  border-radius: 4px;
+  color: white;
+  font-weight: bold;
+}
+
+.success {
+  background-color: #4CAF50;
+}
+
+.error {
+  background-color: #f44336;
+}
+
+.info {
+  background-color: #2196F3;
+}
diff --git a/src/app/components/notification/notification.component.ts b/src/app/components/notification/notification.component.ts
new file mode 100644
index 0000000..b2f4ec9
--- /dev/null
+++ b/src/app/components/notification/notification.component.ts
@@ -0,0 +1,37 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { Subscription } from 'rxjs';
+import { NotificationService, Notification } from '../../services/notification.service';
+
+@Component({
+  selector: 'app-notification',
+  templateUrl: './notification.component.html',
+  styleUrls: ['./notification.component.scss']
+})
+export class NotificationComponent implements OnInit, OnDestroy {
+  notifications: Notification[] = [];
+  private subscription: Subscription;
+
+  constructor(private notificationService: NotificationService) {}
+
+  ngOnInit() {
+    this.subscription = this.notificationService.notifications$.subscribe(
+      notification => {
+        this.notifications.push(notification);
+        setTimeout(() => this.removeNotification(notification), 5000);
+      }
+    );
+  }
+
+  ngOnDestroy() {
+    if (this.subscription) {
+      this.subscription.unsubscribe();
+    }
+  }
+
+  removeNotification(notification: Notification) {
+    const index = this.notifications.indexOf(notification);
+    if (index > -1) {
+      this.notifications.splice(index, 1);
+    }
+  }
+}
diff --git a/src/app/services/background-sync.service.ts b/src/app/services/background-sync.service.ts
new file mode 100644
index 0000000..f22af0e
--- /dev/null
+++ b/src/app/services/background-sync.service.ts
@@ -0,0 +1,34 @@
+import { Injectable } from '@angular/core';
+import { TransactionService } from './transaction.service';
+
+@Injectable({
+  providedIn: 'root'
+})
+export class BackgroundSyncService {
+  constructor(private transactionService: TransactionService) {
+    this.setupNetworkStatusListener();
+  }
+
+  private setupNetworkStatusListener(): void {
+    window.addEventListener('online', () => {
+      console.log('App is online. Starting sync...');
+      this.syncOfflineData();
+    });
+  }
+
+  private syncOfflineData(): void {
+    this.transactionService.syncOfflineTransactions().subscribe({
+      next: (result) => console.log('Sync result:', result),
+      error: (error) => console.error('Sync error:', error)
+    });
+  }
+
+  // This method can be called manually if needed
+  public triggerSync(): void {
+    if (navigator.onLine) {
+      this.syncOfflineData();
+    } else {
+      console.log('App is offline. Sync will be triggered when online.');
+    }
+  }
+}
diff --git a/src/app/services/indexeddb.service.ts b/src/app/services/indexeddb.service.ts
new file mode 100644
index 0000000..78e4507
--- /dev/null
+++ b/src/app/services/indexeddb.service.ts
@@ -0,0 +1,79 @@
+import { Injectable } from '@angular/core';
+
+@Injectable({
+  providedIn: 'root'
+})
+export class IndexedDBService {
+  private dbName = 'OfflineTransactionsDB';
+  private dbVersion = 1;
+  private db: IDBDatabase | null = null;
+
+  constructor() {
+    this.initDB();
+  }
+
+  private initDB(): void {
+    const request = indexedDB.open(this.dbName, this.dbVersion);
+
+    request.onerror = (event) => {
+      console.error('IndexedDB error:', event);
+    };
+
+    request.onsuccess = (event) => {
+      this.db = (event.target as IDBOpenDBRequest).result;
+    };
+
+    request.onupgradeneeded = (event) => {
+      const db = (event.target as IDBOpenDBRequest).result;
+      db.createObjectStore('transactions', { keyPath: 'id', autoIncrement: true });
+    };
+  }
+
+  addTransaction(transaction: any): Promise<void> {
+    return new Promise((resolve, reject) => {
+      if (!this.db) {
+        reject('Database not initialized');
+        return;
+      }
+
+      const txn = this.db.transaction('transactions', 'readwrite');
+      const store = txn.objectStore('transactions');
+      const request = store.add(transaction);
+
+      request.onerror = () => reject(request.error);
+      request.onsuccess = () => resolve();
+    });
+  }
+
+  getTransactions(): Promise<any[]> {
+    return new Promise((resolve, reject) => {
+      if (!this.db) {
+        reject('Database not initialized');
+        return;
+      }
+
+      const txn = this.db.transaction('transactions', 'readonly');
+      const store = txn.objectStore('transactions');
+      const request = store.getAll();
+
+      request.onerror = () => reject(request.error);
+      request.onsuccess = () => resolve(request.result);
+    });
+  }
+
+  clearTransactions(): Promise<void> {
+    return new Promise((resolve, reject) => {
+      if (!this.db) {
+        reject('Database not initialized');
+        return;
+      }
+
+      const txn = this.db.transaction('transactions', 'readwrite');
+      const store = txn.objectStore('transactions');
+      const request = store.clear();
+
+      request.onerror = () => reject(request.error);
+      request.onsuccess = () => resolve();
+    });
+  }
+}
diff --git a/src/app/services/ledger-cache.service.ts b/src/app/services/ledger-cache.service.ts
new file mode 100644
index 0000000..f7b97f7
--- /dev/null
+++ b/src/app/services/ledger-cache.service.ts
@@ -0,0 +1,48 @@
+import { Injectable } from '@angular/core';
+import { HttpClient } from '@angular/common/http';
+import { Observable, of } from 'rxjs';
+import { tap, catchError } from 'rxjs/operators';
+
+@Injectable({
+  providedIn: 'root'
+})
+export class LedgerCacheService {
+  private apiUrl = 'https://your-api-url.com/ledgers'; // Replace with your actual API URL
+  private cacheKey = 'cachedLedgers';
+
+  constructor(private http: HttpClient) {}
+
+  getLedgers(): Observable<any[]> {
+    const cachedData = localStorage.getItem(this.cacheKey);
+    if (cachedData) {
+      return of(JSON.parse(cachedData));
+    } else {
+      return this.fetchAndCacheLedgers();
+    }
+  }
+
+  private fetchAndCacheLedgers(): Observable<any[]> {
+    return this.http.get<any[]>(this.apiUrl).pipe(
+      tap(ledgers => {
+        localStorage.setItem(this.cacheKey, JSON.stringify(ledgers));
+      }),
+      catchError(error => {
+        console.error('Error fetching ledgers:', error);
+        return of([]);
+      })
+    );
+  }
+
+  addLedger(ledger: any): Observable<any> {
+    return this.http.post(this.apiUrl, ledger).pipe(
+      tap(() => {
+        // Update the cache after successfully adding a new ledger
+        this.fetchAndCacheLedgers().subscribe();
+      })
+    );
+  }
+
+  clearCache(): void {
+    localStorage.removeItem(this.cacheKey);
+  }
+}
diff --git a/src/app/services/notification.service.ts b/src/app/services/notification.service.ts
new file mode 100644
index 0000000..000a2e1
--- /dev/null
+++ b/src/app/services/notification.service.ts
@@ -0,0 +1,20 @@
+import { Injectable } from '@angular/core';
+import { Subject } from 'rxjs';
+
+export interface Notification {
+  message: string;
+  type: 'success' | 'error' | 'info';
+}
+
+@Injectable({
+  providedIn: 'root'
+})
+export class NotificationService {
+  private notificationSubject = new Subject<Notification>();
+
+  notifications$ = this.notificationSubject.asObservable();
+
+  showNotification(message: string, type: 'success' | 'error' | 'info' = 'info') {
+    this.notificationSubject.next({ message, type });
+  }
+}
diff --git a/src/app/services/transaction.service.ts b/src/app/services/transaction.service.ts
new file mode 100644
index 0000000..efb9906
--- /dev/null
+++ b/src/app/services/transaction.service.ts
@@ -0,0 +1,70 @@
+import { Injectable } from '@angular/core';
+import { HttpClient } from '@angular/common/http';
+import { Observable, from, of } from 'rxjs';
+import { catchError, switchMap } from 'rxjs/operators';
+import { IndexedDBService } from './indexeddb.service';
+
+@Injectable({
+  providedIn: 'root'
+})
+export class TransactionService {
+  private apiUrl = 'https://your-api-url.com/transactions'; // Replace with your actual API URL
+
+  constructor(
+    private http: HttpClient,
+    private indexedDBService: IndexedDBService
+  ) {}
+
+  addTransaction(transaction: any): Observable<any> {
+    if (navigator.onLine) {
+      return this.http.post(this.apiUrl, transaction).pipe(
+        catchError((error) => {
+          console.error('Error sending transaction to server:', error);
+          return from(this.indexedDBService.addTransaction(transaction));
+        })
+      );
+    } else {
+      return from(this.indexedDBService.addTransaction(transaction));
+    }
+  }
+
+  getTransactions(): Observable<any[]> {
+    if (navigator.onLine) {
+      return this.http.get<any[]>(this.apiUrl).pipe(
+        catchError((error) => {
+          console.error('Error fetching transactions from server:', error);
+          return from(this.indexedDBService.getTransactions());
+        })
+      );
+    } else {
+      return from(this.indexedDBService.getTransactions());
+    }
+  }
+
+  syncOfflineTransactions(): Observable<any> {
+    return from(this.indexedDBService.getTransactions()).pipe(
+      switchMap((offlineTransactions) => {
+        if (offlineTransactions.length === 0) {
+          return of(null);
+        }
+
+        const syncRequests = offlineTransactions.map(transaction =>
+          this.http.post(this.apiUrl, transaction)
+        );
+
+        return new Observable(observer => {
+          Promise.all(syncRequests)
+            .then(() => this.indexedDBService.clearTransactions())
+            .then(() => {
+              observer.next('All offline transactions synced');
+              observer.complete();
+            })
+            .catch(error => {
+              console.error('Error syncing offline transactions:', error);
+              observer.error(error);
+            });
+        });
+      })
+    );
+  }
+}
diff --git a/src/main.ts b/src/main.ts
index 35b00f3..5f8b580 100644
--- a/src/main.ts
+++ b/src/main.ts
@@ -1,6 +1,15 @@
-import { bootstrapApplication } from '@angular/platform-browser';
-import { appConfig } from './app/app.config';
-import { AppComponent } from './app/app.component';
+import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
+import { AppModule } from './app/app.module';
 
-bootstrapApplication(AppComponent, appConfig)
-  .catch((err) => console.error(err));
+platformBrowserDynamic().bootstrapModule(AppModule)
+  .catch(err => console.error(err));
+
+if ('serviceWorker' in navigator) {
+  window.addEventListener('load', () => {
+    navigator.serviceWorker.register('/sw.js').then(registration => {
+      console.log('SW registered: ', registration);
+    }).catch(registrationError => {
+      console.log('SW registration failed: ', registrationError);
+    });
+  });
+}
diff --git a/src/sw.js b/src/sw.js
new file mode 100644
index 0000000..ad06154
--- /dev/null
+++ b/src/sw.js
@@ -0,0 +1,20 @@
+self.addEventListener('install', (event) => {
+  event.waitUntil(
+    caches.open('v1').then((cache) => {
+      return cache.addAll([
+        '/',
+        '/index.html',
+        '/styles.css',
+        '/main.js'
+      ]);
+    })
+  );
+});
+
+self.addEventListener('fetch', (event) => {
+  event.respondWith(
+    caches.match(event.request).then((response) => {
+      return response || fetch(event.request);
+    })
+  );
+});
